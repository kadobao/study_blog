from DrissionPage import ChromiumPage, ChromiumOptions
from DrissionPage import WebPage
from concurrent.futures import ThreadPoolExecutor

co = ChromiumOptions().auto_port()

page = WebPage(chromium_options=co)
# co和page都放在外面这样就不会产生新的端口的

# # co只要隔离就行(只要隔离就会产生不同的端口)，page需要序号区分(不同的实例)才会产生不同的端口，线程池是同时启动，所以是同一序号

def test(num):
    print(page.address)
    test_Tab = page.new_tab(new_context=True)  # 新建标签页，以无痕模式，他的无痕是不共享数据给其他窗口，而不是打开真正的无痕窗口
    page.close()
    test_Tab.get(url='https://linux.do/new')
    if test_Tab.ele('css:[class="panel" ]  span.d-button-label', timeout=2) or test_Tab.ele('css:a[class="btn btn-primary btn-small login-button btn-icon-text"]', timeout=2):
        print('登录成功')
    test_Tab.close()


nums = [i for i in range(1, 2)]

with ThreadPoolExecutor(max_workers=1) as executor:
    executor.map(test, nums)