import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as e}from"./app-DIA8nXH9.js";const t={};function l(h,i){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="在非ui线程获取界面的属性和操控界面" tabindex="-1"><a class="header-anchor" href="#在非ui线程获取界面的属性和操控界面"><span>在非UI线程获取界面的属性和操控界面</span></a></h1><h2 id="view与ui线程的关系" tabindex="-1"><a class="header-anchor" href="#view与ui线程的关系"><span>View与UI线程的关系</span></a></h2><p><code>view.xaml.cs</code>本身就是UI线程的一部分。</p><h2 id="访问主窗口的两种方式" tabindex="-1"><a class="header-anchor" href="#访问主窗口的两种方式"><span>访问主窗口的两种方式</span></a></h2><p><code>Application.Current.MainWindow</code>相当于<code>view.xaml.cs</code>的<code>this</code>，都可以访问主窗口。</p><p>以下代码是等价的：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 this</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 以下代码在 MainWindow.xaml.cs 中：</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">WindowState</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WindowState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Minimized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 Application.Current.MainWindow</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在MainWindowViewModel(非UI线程)中：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">MainWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">WindowState</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WindowState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Minimized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用dispatcher操作ui线程" tabindex="-1"><a class="header-anchor" href="#使用dispatcher操作ui线程"><span>使用Dispatcher操作UI线程</span></a></h2><p><code>Application.Current.Dispatcher.Invoke</code>和<code>Application.Current.Dispatcher.BeginInvoke</code>提供的是一个非UI线程可以操控UI的作用。</p><p>以下代码是等价的：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 以下代码在 MainWindow.xaml.cs 中：</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DragMove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 直接调用（隐含UI线程）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在MainWindowViewModel(非UI线程)中：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Dispatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">MainWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DragMove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命名空间的使用" tabindex="-1"><a class="header-anchor" href="#命名空间的使用"><span>命名空间的使用</span></a></h2><ul><li><code>using System.Windows.Controls</code>用于创建控件和获取、操控控件的元素（属性）</li><li><code>using System.Windows.Input</code>用于响应用户交互，可以获取到关于事件的参数，如鼠标的点击、具体的键盘值</li></ul><p>因此，ViewModel一般只引入<code>using System.Windows.Input</code>，因为控件不能直接操作UI，只能通过绑定UI的属性进行修改。</p>`,14)])])}const r=s(t,[["render",l]]),d=JSON.parse('{"path":"/acrticle/Csharp/WPF%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E9%9D%9EUI%E7%BA%BF%E7%A8%8B%E8%8E%B7%E5%8F%96%E7%95%8C%E9%9D%A2%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%93%8D%E6%8E%A7%E7%95%8C%E9%9D%A2.html","title":"在非UI线程获取界面的属性和操控界面","lang":"zh-CN","frontmatter":{"title":"在非UI线程获取界面的属性和操控界面","icon":"code","order":11,"category":["C#学习"],"tag":["WPF","非UI线程"],"description":"在非UI线程获取界面的属性和操控界面 View与UI线程的关系 view.xaml.cs本身就是UI线程的一部分。 访问主窗口的两种方式 Application.Current.MainWindow相当于view.xaml.cs的this，都可以访问主窗口。 以下代码是等价的： 使用Dispatcher操作UI线程 Application.Curren...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在非UI线程获取界面的属性和操控界面\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-24T05:18:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/Csharp/WPF%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E9%9D%9EUI%E7%BA%BF%E7%A8%8B%E8%8E%B7%E5%8F%96%E7%95%8C%E9%9D%A2%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%93%8D%E6%8E%A7%E7%95%8C%E9%9D%A2.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"在非UI线程获取界面的属性和操控界面"}],["meta",{"property":"og:description","content":"在非UI线程获取界面的属性和操控界面 View与UI线程的关系 view.xaml.cs本身就是UI线程的一部分。 访问主窗口的两种方式 Application.Current.MainWindow相当于view.xaml.cs的this，都可以访问主窗口。 以下代码是等价的： 使用Dispatcher操作UI线程 Application.Curren..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T05:18:54.000Z"}],["meta",{"property":"article:tag","content":"非UI线程"}],["meta",{"property":"article:tag","content":"WPF"}],["meta",{"property":"article:modified_time","content":"2025-09-24T05:18:54.000Z"}]]},"git":{"createdTime":1758691134000,"updatedTime":1758691134000,"contributors":[{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":1,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":0.98,"words":294},"filePathRelative":"acrticle/Csharp/WPF学习/在非UI线程获取界面的属性和操控界面.md","excerpt":"\\n<h2>View与UI线程的关系</h2>\\n<p><code>view.xaml.cs</code>本身就是UI线程的一部分。</p>\\n<h2>访问主窗口的两种方式</h2>\\n<p><code>Application.Current.MainWindow</code>相当于<code>view.xaml.cs</code>的<code>this</code>，都可以访问主窗口。</p>\\n<p>以下代码是等价的：</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-csharp\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 使用 this</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 以下代码在 MainWindow.xaml.cs 中：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">this</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">WindowState</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> WindowState</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">Minimized</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 使用 Application.Current.MainWindow</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 在MainWindowViewModel(非UI线程)中：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">Application</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">Current</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">MainWindow</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">WindowState</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> WindowState</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">Minimized</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
