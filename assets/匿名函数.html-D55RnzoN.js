import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as t}from"./app-DIA8nXH9.js";const n={};function l(h,i){return t(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h1><p>匿名函数是一种没有名称的函数，通常用于简化代码或作为参数传递给其他函数。在 C# 中，Lambda 表达式是创建匿名函数的一种常见方式。</p><h2 id="lambda-表达式的基本语法" tabindex="-1"><a class="header-anchor" href="#lambda-表达式的基本语法"><span>Lambda 表达式的基本语法：</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">输入参数</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">表达式或语句块</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="lambda-表达式语法示例" tabindex="-1"><a class="header-anchor" href="#lambda-表达式语法示例"><span>Lambda 表达式语法示例</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 无参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 一个参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 多个参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 带类型声明</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lambda-表达式与委托" tabindex="-1"><a class="header-anchor" href="#lambda-表达式与委托"><span>Lambda 表达式与委托</span></a></h2><p>Lambda 表达式通常被转换为以下类型之一：</p><ul><li><strong>Action 系列委托</strong>（无返回值）</li></ul><p><code>Action</code> 是一个预定义的委托类型，它指向一个无返回值且无参数的方法。</p><p>当你把 Lambda 表达式传递给一个需要委托类型参数的方法时（比如 <code>Dispatcher.Invoke</code>），编译器会自动将其转换为对应的委托类型。</p>`,11)])])}const d=s(n,[["render",l]]),k=JSON.parse('{"path":"/acrticle/Csharp/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.html","title":"匿名函数","lang":"zh-CN","frontmatter":{"title":"匿名函数","icon":"code","order":8,"category":["C#学习"],"tag":["C#","匿名函数"],"description":"匿名函数 匿名函数是一种没有名称的函数，通常用于简化代码或作为参数传递给其他函数。在 C# 中，Lambda 表达式是创建匿名函数的一种常见方式。 Lambda 表达式的基本语法： Lambda 表达式语法示例 Lambda 表达式与委托 Lambda 表达式通常被转换为以下类型之一： Action 系列委托（无返回值） Action 是一个预定义的委...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"匿名函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-24T03:10:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/Csharp/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"匿名函数"}],["meta",{"property":"og:description","content":"匿名函数 匿名函数是一种没有名称的函数，通常用于简化代码或作为参数传递给其他函数。在 C# 中，Lambda 表达式是创建匿名函数的一种常见方式。 Lambda 表达式的基本语法： Lambda 表达式语法示例 Lambda 表达式与委托 Lambda 表达式通常被转换为以下类型之一： Action 系列委托（无返回值） Action 是一个预定义的委..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T03:10:59.000Z"}],["meta",{"property":"article:tag","content":"匿名函数"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:modified_time","content":"2025-09-24T03:10:59.000Z"}]]},"git":{"createdTime":1758683459000,"updatedTime":1758683459000,"contributors":[{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":1,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":0.83,"words":248},"filePathRelative":"acrticle/Csharp/匿名函数.md","excerpt":"\\n<p>匿名函数是一种没有名称的函数，通常用于简化代码或作为参数传递给其他函数。在 C# 中，Lambda 表达式是创建匿名函数的一种常见方式。</p>\\n<h2>Lambda 表达式的基本语法：</h2>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-csharp\\"><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">输入参数</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) =&gt; </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">表达式或语句块</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,k as data};
