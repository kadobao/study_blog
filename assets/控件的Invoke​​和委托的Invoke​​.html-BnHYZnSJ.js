import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,o as r}from"./app-CgcWh0et.js";const i={};function a(l,e){return r(),n("div",null,[...e[0]||(e[0]=[t('<h1 id="控件的invoke和委托的invoke" tabindex="-1"><a class="header-anchor" href="#控件的invoke和委托的invoke"><span>控件的Invoke和委托的Invoke</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><ul><li><strong>Control.Invoke</strong>：仅用于跨线程调度，无事件触发功能。</li><li><strong>委托的Invoke</strong>：用于在当前线程执行委托指向的方法。</li></ul><h2 id="_1-invoke的核心作用-线程调度" tabindex="-1"><a class="header-anchor" href="#_1-invoke的核心作用-线程调度"><span>1. Invoke的核心作用：线程调度</span></a></h2><p>Control.Invoke的唯一职责是解决跨线程访问 UI 的问题：</p><ul><li><strong>输入</strong>：接收一个委托（如 Action）。</li><li><strong>行为</strong>：将该委托同步发送到 UI 线程的消息队列，并等待其执行完成。</li><li><strong>输出</strong>：无返回值（void）。</li></ul><h2 id="_2-invokerequired属性" tabindex="-1"><a class="header-anchor" href="#_2-invokerequired属性"><span>2. InvokeRequired属性</span></a></h2><p><code>control.InvokeRequired</code>：检测当前是否是 UI 线程。</p>',8)])])}const p=o(i,[["render",a]]),v=JSON.parse('{"path":"/acrticle/Csharp/%E6%8E%A7%E4%BB%B6%E7%9A%84Invoke%E2%80%8B%E2%80%8B%E5%92%8C%E5%A7%94%E6%89%98%E7%9A%84Invoke%E2%80%8B%E2%80%8B.html","title":"控件的Invoke​​和委托的Invoke​​","lang":"zh-CN","frontmatter":{"title":"控件的Invoke​​和委托的Invoke​​","icon":"code","order":21,"category":["C#学习"],"tag":["跨线程","委托的Invoke​​"],"description":"控件的Invoke和委托的Invoke 基本概念 Control.Invoke：仅用于跨线程调度，无事件触发功能。 委托的Invoke：用于在当前线程执行委托指向的方法。 1. Invoke的核心作用：线程调度 Control.Invoke的唯一职责是解决跨线程访问 UI 的问题： 输入：接收一个委托（如 Action）。 行为：将该委托同步发送到 U...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"控件的Invoke​​和委托的Invoke​​\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-24T01:39:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/Csharp/%E6%8E%A7%E4%BB%B6%E7%9A%84Invoke%E2%80%8B%E2%80%8B%E5%92%8C%E5%A7%94%E6%89%98%E7%9A%84Invoke%E2%80%8B%E2%80%8B.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"控件的Invoke​​和委托的Invoke​​"}],["meta",{"property":"og:description","content":"控件的Invoke和委托的Invoke 基本概念 Control.Invoke：仅用于跨线程调度，无事件触发功能。 委托的Invoke：用于在当前线程执行委托指向的方法。 1. Invoke的核心作用：线程调度 Control.Invoke的唯一职责是解决跨线程访问 UI 的问题： 输入：接收一个委托（如 Action）。 行为：将该委托同步发送到 U..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-24T01:39:38.000Z"}],["meta",{"property":"article:tag","content":"委托的Invoke​​"}],["meta",{"property":"article:tag","content":"跨线程"}],["meta",{"property":"article:modified_time","content":"2025-10-24T01:39:38.000Z"}]]},"git":{"createdTime":1761269978000,"updatedTime":1761269978000,"contributors":[{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":1,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":0.54,"words":163},"filePathRelative":"acrticle/Csharp/控件的Invoke​​和委托的Invoke​​.md","excerpt":"\\n<h2>基本概念</h2>\\n<ul>\\n<li><strong>Control.Invoke</strong>：仅用于跨线程调度，无事件触发功能。</li>\\n<li><strong>委托的Invoke</strong>：用于在当前线程执行委托指向的方法。</li>\\n</ul>\\n<h2>1. Invoke的核心作用：线程调度</h2>\\n<p>Control.Invoke的唯一职责是解决跨线程访问 UI 的问题：</p>\\n<ul>\\n<li><strong>输入</strong>：接收一个委托（如 Action）。</li>\\n<li><strong>行为</strong>：将该委托同步发送到 UI 线程的消息队列，并等待其执行完成。</li>\\n<li><strong>输出</strong>：无返回值（void）。</li>\\n</ul>","autoDesc":true}');export{p as comp,v as data};
