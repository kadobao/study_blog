import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-C7uw3Huf.js";const t={};function l(h,s){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="事件-event-与委托-delegate-的区别" tabindex="-1"><a class="header-anchor" href="#事件-event-与委托-delegate-的区别"><span>事件（Event）与委托（Delegate）的区别</span></a></h2><h3 id="核心区别" tabindex="-1"><a class="header-anchor" href="#核心区别"><span>核心区别</span></a></h3><p>事件是对委托的封装，只允许 <code>+=</code> 和 <code>-=</code> 操作，禁止直接赋值（<code>=</code>）和调用（<code>Invoke</code>）。</p><h3 id="事件比委托多了一层封装" tabindex="-1"><a class="header-anchor" href="#事件比委托多了一层封装"><span>事件比委托多了一层封装</span></a></h3><h4 id="委托的本质" tabindex="-1"><a class="header-anchor" href="#委托的本质"><span>委托的本质</span></a></h4><p>委托（Delegate）是一个<strong>方法指针列表</strong>，可以存储多个方法。<br> 外部代码可以<strong>直接修改</strong>这个列表（赋值、调用、清空）。</p><h4 id="事件的本质" tabindex="-1"><a class="header-anchor" href="#事件的本质"><span>事件的本质</span></a></h4><p>事件（Event）在<strong>委托的基础上</strong>增加了一层<strong>访问控制</strong>：</p><ul><li><strong>外部只能 <code>+=</code> 订阅和 <code>-=</code> 取消订阅</strong>，不能直接修改委托。</li><li><strong>只能在<code>声明事件的类</code>内部触发</strong>（如 <code>OnClick()</code> 方法）。</li></ul><h4 id="事件的预定义委托" tabindex="-1"><a class="header-anchor" href="#事件的预定义委托"><span>事件的预定义委托</span></a></h4><p>C# 提供了内置的 <code>EventHandler</code> 和 <code>EventHandler&lt;TEventArgs&gt;</code> 委托：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> event</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EventHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> MyEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 无自定义参数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> event</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EventHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyEventArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MyEventWithData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 带自定义参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件示例" tabindex="-1"><a class="header-anchor" href="#事件示例"><span>事件示例</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Button</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. 声明事件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> event</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EventHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Click;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 触发事件的方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OnClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        Click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">EventArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// **只能在\`声明事件的类\`内部触发**，这个在\`Button\`类内部，所以是在\`Button\`类内部触发的</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Program</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Button</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> btn</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2. 注册事件处理程序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        btn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Click</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Button_Click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 触发事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        btn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OnClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. 事件处理方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Button_Click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">EventArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;按钮被点击了！&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="委托订阅和发布事件的参数匹配规则" tabindex="-1"><a class="header-anchor" href="#委托订阅和发布事件的参数匹配规则"><span>委托订阅和发布事件的参数匹配规则</span></a></h2><h3 id="参数签名必须严格匹配" tabindex="-1"><a class="header-anchor" href="#参数签名必须严格匹配"><span>参数签名必须严格匹配</span></a></h3><p>委托的订阅和发布事件的参数都必须严格符合委托的签名。这意味着：</p><ul><li><strong>订阅事件的方法参数</strong>必须与委托定义的参数类型和数量完全一致</li><li><strong>发布事件时传递的参数</strong>也必须与委托定义的参数类型和数量完全一致</li></ul><h3 id="订阅事件的参数来源" tabindex="-1"><a class="header-anchor" href="#订阅事件的参数来源"><span>订阅事件的参数来源</span></a></h3><p>订阅事件的参数来源于发布事件传递过来的参数。当事件被触发时，发布者会将参数传递给所有订阅了该事件的方法。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ol><li><strong>委托签名定义了参数契约</strong>：订阅和发布都必须遵循这个契约</li><li><strong>订阅者接收发布者传递的参数</strong>：参数流向是单向的，从发布者到订阅者</li><li><strong>参数匹配是编译时检查</strong>：不匹配的参数会在编译阶段报错</li><li><strong>事件参数通常包含事件相关信息</strong>：如事件源(sender)和事件数据(e)</li></ol>`,22)])])}const r=i(t,[["render",l]]),d=JSON.parse('{"path":"/acrticle/Csharp/%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6.html","title":"注册事件","lang":"zh-CN","frontmatter":{"title":"注册事件","icon":"code","order":20,"category":["C#学习"],"tag":["注册事件","委托"],"description":"事件（Event）与委托（Delegate）的区别 核心区别 事件是对委托的封装，只允许 += 和 -= 操作，禁止直接赋值（=）和调用（Invoke）。 事件比委托多了一层封装 委托的本质 委托（Delegate）是一个方法指针列表，可以存储多个方法。 外部代码可以直接修改这个列表（赋值、调用、清空）。 事件的本质 事件（Event）在委托的基础上增...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注册事件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-24T01:39:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://kadobao.github.io/study_blog/acrticle/\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/Csharp/%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"注册事件"}],["meta",{"property":"og:description","content":"事件（Event）与委托（Delegate）的区别 核心区别 事件是对委托的封装，只允许 += 和 -= 操作，禁止直接赋值（=）和调用（Invoke）。 事件比委托多了一层封装 委托的本质 委托（Delegate）是一个方法指针列表，可以存储多个方法。 外部代码可以直接修改这个列表（赋值、调用、清空）。 事件的本质 事件（Event）在委托的基础上增..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-24T01:39:38.000Z"}],["meta",{"property":"article:tag","content":"委托"}],["meta",{"property":"article:tag","content":"注册事件"}],["meta",{"property":"article:modified_time","content":"2025-10-24T01:39:38.000Z"}]]},"git":{"createdTime":1761186678000,"updatedTime":1761269978000,"contributors":[{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":2,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":2.06,"words":617},"filePathRelative":"acrticle/Csharp/注册事件.md","excerpt":"<h2>事件（Event）与委托（Delegate）的区别</h2>\\n<h3>核心区别</h3>\\n<p>事件是对委托的封装，只允许 <code>+=</code> 和 <code>-=</code> 操作，禁止直接赋值（<code>=</code>）和调用（<code>Invoke</code>）。</p>\\n<h3>事件比委托多了一层封装</h3>\\n<h4>委托的本质</h4>\\n<p>委托（Delegate）是一个<strong>方法指针列表</strong>，可以存储多个方法。<br>\\n外部代码可以<strong>直接修改</strong>这个列表（赋值、调用、清空）。</p>\\n<h4>事件的本质</h4>","autoDesc":true}');export{r as comp,d as data};
