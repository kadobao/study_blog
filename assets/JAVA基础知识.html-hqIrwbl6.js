import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as l}from"./app-BV8bltOC.js";const n={},t=l(`<p>一个Java源文件中最多只能有一个公共类，但是可以有多个非公共类，公共类的名称必须与文件名相同。</p><p>在Java编程中，类是基本单位，它是一个蓝图或模板，用于创建对象。类包含属性和方法，这些方法可以是公开的（public）或私有的（private），可以是静态的（static）或实例的，并且可以有返回值或不返回值。实例就是不加static就是实例方法。</p><p>Java常用的2种注释，第一种是单行注释，以双斜线开头，而多行注释以/<em>星号开头，以</em>/结束。</p><p>在Java编程中，变量是存储数据的容器。每个变量都有一个类型，决定了它可以存储哪种类型的数据。Java中的变量可以分为以下几类：</p><h3 id="_1-局部变量-local-variables" tabindex="-1"><a class="header-anchor" href="#_1-局部变量-local-variables"><span>1. 局部变量（Local Variables）</span></a></h3><ul><li><strong>定义</strong>：在方法、构造方法或语句块内部定义的变量。</li><li><strong>作用域</strong>：从声明处开始，直到包含它的块结束。</li><li><strong>生命周期</strong>：在方法或块执行时创建，执行完后销毁。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> localVar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 局部变量</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(localVar);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-成员变量-instance-variables" tabindex="-1"><a class="header-anchor" href="#_2-成员变量-instance-variables"><span>2. 成员变量（Instance Variables）</span></a></h3><ul><li><strong>定义</strong>：在类中但在方法、构造方法或任何块之外定义的变量。</li><li><strong>作用域</strong>：整个类，但在类的任何方法、构造方法或块之外不能直接访问。</li><li><strong>生命周期</strong>：与对象的生命周期相同，对象被创建时初始化，对象被销毁时销毁。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instanceVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 成员变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> instanceVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">instanceVar</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> instanceVar;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-静态变量-static-variables" tabindex="-1"><a class="header-anchor" href="#_3-静态变量-static-variables"><span>3. 静态变量（Static Variables）</span></a></h3><ul><li><strong>定义</strong>：使用 <code>static</code> 关键字在类中定义的变量。</li><li><strong>作用域</strong>：整个类，可以通过类名直接访问。</li><li><strong>生命周期</strong>：与类的生命周期相同，类被加载时初始化，类被卸载时销毁。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> staticVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 静态变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">staticVar</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">staticVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-常量-constants" tabindex="-1"><a class="header-anchor" href="#_4-常量-constants"><span>4. 常量（Constants）</span></a></h3><ul><li><strong>定义</strong>：使用 <code>final</code> 关键字定义的变量，一旦赋值就不能改变。</li><li><strong>作用域</strong>：与变量的定义位置相关。</li><li><strong>生命周期</strong>：与变量的生命周期相同。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CONSTANT_VAR </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 常量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MyClass</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> myClass</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">myClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONSTANT_VAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-参数变量-parameter-variables" tabindex="-1"><a class="header-anchor" href="#_5-参数变量-parameter-variables"><span>5. 参数变量（Parameter Variables）</span></a></h3><ul><li><strong>定义</strong>：在方法或构造方法的参数列表中定义的变量。</li><li><strong>作用域</strong>：方法或构造方法的内部。</li><li><strong>生命周期</strong>：方法或构造方法执行时存在，执行完后销毁。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> paramVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 参数变量</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(paramVar);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>局部变量</strong>：在方法、构造方法或语句块内部定义，作用域和生命周期有限。</li><li><strong>成员变量</strong>：在类中定义，作用域是整个类，生命周期与对象相同。(实例变量)</li><li><strong>静态变量</strong>：使用 <code>static</code> 关键字定义，作用域是整个类，生命周期与类相同。(类变量)</li><li><strong>常量</strong>：使用 <code>final</code> 关键字定义，一旦赋值不能改变。</li><li><strong>参数变量</strong>：在方法或构造方法的参数列表中定义，作用域和生命周期有限。</li></ul><p>System.out.println()向屏幕输出一些内容。</p><p>方法重载是指在同一个类中定义多个具有相同名称但参数列表不同的方法。方法重载的主要目的是提供灵活性，使得方法可以根据不同的参数类型或数量执行不同的操作。</p><p>理解接口的实现是Java编程中的一个重要概念。让我们通过一个详细的示例来解释如何实现接口。</p><h3 id="接口的定义" tabindex="-1"><a class="header-anchor" href="#接口的定义"><span>接口的定义</span></a></h3><p>首先，我们定义一个接口 <code>Animal</code>，其中包含两个抽象方法 <code>eat()</code> 和 <code>sleep()</code>，以及一个常量 <code>LEGS</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 抽象方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 抽象方法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LEGS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 常量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口的实现" tabindex="-1"><a class="header-anchor" href="#接口的实现"><span>接口的实现</span></a></h3><p>接下来，我们定义一个类 <code>Dog</code>，它实现 <code>Animal</code> 接口。实现接口的类必须提供接口中所有抽象方法的具体实现。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;The dog eats food.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;The dog sleeps.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h3><ol><li><p><strong>接口定义</strong>：</p><ul><li><code>Animal</code> 接口定义了两个抽象方法 <code>eat()</code> 和 <code>sleep()</code>，以及一个常量 <code>LEGS</code>。</li><li>抽象方法没有具体实现，只有方法签名。</li><li>常量 <code>LEGS</code> 默认是 <code>public</code>、<code>static</code> 和 <code>final</code> 的。</li></ul></li><li><p><strong>类实现接口</strong>：</p><ul><li><code>Dog</code> 类使用 <code>implements</code> 关键字来实现 <code>Animal</code> 接口。</li><li><code>Dog</code> 类必须提供 <code>eat()</code> 和 <code>sleep()</code> 方法的具体实现。</li><li>使用 <code>@Override</code> 注解来表明这些方法是重写接口中的抽象方法。</li></ul></li></ol><h3 id="使用实现接口的类" tabindex="-1"><a class="header-anchor" href="#使用实现接口的类"><span>使用实现接口的类</span></a></h3><p>我们可以创建 <code>Dog</code> 类的实例，并调用其方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Dog</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dog</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: The dog eats food.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: The dog sleeps.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Number of legs: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LEGS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: Number of legs: 4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释-1" tabindex="-1"><a class="header-anchor" href="#解释-1"><span>解释</span></a></h3><ol><li><p><strong>创建实例</strong>：</p><ul><li>在 <code>Main</code> 类的 <code>main</code> 方法中，我们创建了 <code>Dog</code> 类的实例 <code>dog</code>。</li></ul></li><li><p><strong>调用方法</strong>：</p><ul><li>调用 <code>dog</code> 的 <code>eat()</code> 方法，输出 <code>The dog eats food.</code>。</li><li>调用 <code>dog</code> 的 <code>sleep()</code> 方法，输出 <code>The dog sleeps.</code>。</li></ul></li><li><p><strong>访问常量</strong>：</p><ul><li>通过接口名 <code>Animal</code> 访问常量 <code>LEGS</code>，输出 <code>Number of legs: 4</code>。</li></ul></li></ol><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><ul><li><strong>接口</strong>：定义了一组抽象方法和常量。</li><li><strong>实现接口</strong>：类使用 <code>implements</code> 关键字实现接口，并提供接口中所有抽象方法的具体实现。</li><li><strong>使用实现接口的类</strong>：可以创建实现接口的类的实例，并调用其方法。</li></ul><p>通过这个示例，你应该能够理解如何定义接口以及如何实现接口。接口在Java中用于实现多态、解耦和模块化设计，是面向对象编程中的重要概念。</p><p><strong>IntelliJ:</strong></p><ul><li><strong>适用场景：</strong> 如果你希望保持简单，并且不需要使用外部构建管理工具，选择这个选项是最方便的。</li><li><strong>优点：</strong><ul><li>设置简单。</li><li>适合小型项目或Java开发初学者。</li></ul></li></ul><p><strong>Maven:</strong></p><ul><li><strong>适用场景：</strong> 如果你想轻松管理依赖项，并且需要一个结构化的构建过程，Maven 是一个很好的选择。它在Java项目，特别是企业级应用中被广泛使用。</li><li><strong>优点：</strong><ul><li>简化了依赖管理。</li><li>提供了全面的项目构建生命周期支持。</li><li>容易与各种IDE和CI/CD管道集成。</li></ul></li><li><strong>缺点：</strong><ul><li>对于非常小的项目可能有点过度。</li><li>如果你是新手，学习曲线稍微陡峭。</li></ul></li></ul><p><strong>Gradle:</strong></p><ul><li><strong>适用场景：</strong> 如果你喜欢更现代化和灵活的构建系统，并且追求更快的构建速度，Gradle 是一个不错的选择。它在Java和Android项目中越来越受欢迎。</li><li><strong>优点：</strong><ul><li>高度灵活和可定制化。</li><li>与Maven相比，构建速度更快。</li><li>支持声明式（类似于Maven）和命令式的构建脚本。</li></ul></li><li><strong>缺点：</strong><ul><li>学习曲线较高，特别是如果你习惯于使用Maven。</li><li>与Maven相比，文档较少。</li></ul></li></ul>`,41),e=[t];function h(k,p){return a(),s("div",null,e)}const g=i(n,[["render",h],["__file","JAVA基础知识.html.vue"]]),c=JSON.parse('{"path":"/acrticle/JAVA%E5%AD%A6%E4%B9%A0/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","title":"JAVA基础知识","lang":"zh-CN","frontmatter":{"title":"JAVA基础知识","icon":null,"order":1,"category":["JAVA基础知识"],"tag":["JAVA学习"],"description":"一个Java源文件中最多只能有一个公共类，但是可以有多个非公共类，公共类的名称必须与文件名相同。 在Java编程中，类是基本单位，它是一个蓝图或模板，用于创建对象。类包含属性和方法，这些方法可以是公开的（public）或私有的（private），可以是静态的（static）或实例的，并且可以有返回值或不返回值。实例就是不加static就是实例方法。 J...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/acrticle/JAVA%E5%AD%A6%E4%B9%A0/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"JAVA基础知识"}],["meta",{"property":"og:description","content":"一个Java源文件中最多只能有一个公共类，但是可以有多个非公共类，公共类的名称必须与文件名相同。 在Java编程中，类是基本单位，它是一个蓝图或模板，用于创建对象。类包含属性和方法，这些方法可以是公开的（public）或私有的（private），可以是静态的（static）或实例的，并且可以有返回值或不返回值。实例就是不加static就是实例方法。 J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-07T07:33:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:tag","content":"JAVA学习"}],["meta",{"property":"article:modified_time","content":"2024-09-07T07:33:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JAVA基础知识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-07T07:33:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"1. 局部变量（Local Variables）","slug":"_1-局部变量-local-variables","link":"#_1-局部变量-local-variables","children":[]},{"level":3,"title":"2. 成员变量（Instance Variables）","slug":"_2-成员变量-instance-variables","link":"#_2-成员变量-instance-variables","children":[]},{"level":3,"title":"3. 静态变量（Static Variables）","slug":"_3-静态变量-static-variables","link":"#_3-静态变量-static-variables","children":[]},{"level":3,"title":"4. 常量（Constants）","slug":"_4-常量-constants","link":"#_4-常量-constants","children":[]},{"level":3,"title":"5. 参数变量（Parameter Variables）","slug":"_5-参数变量-parameter-variables","link":"#_5-参数变量-parameter-variables","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"接口的定义","slug":"接口的定义","link":"#接口的定义","children":[]},{"level":3,"title":"接口的实现","slug":"接口的实现","link":"#接口的实现","children":[]},{"level":3,"title":"解释","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"使用实现接口的类","slug":"使用实现接口的类","link":"#使用实现接口的类","children":[]},{"level":3,"title":"解释","slug":"解释-1","link":"#解释-1","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}],"git":{"createdTime":1725232270000,"updatedTime":1725694392000,"contributors":[{"name":"cf","email":"toysouth0@gmail.com","commits":1}]},"readingTime":{"minutes":5.89,"words":1767},"filePathRelative":"acrticle/JAVA学习/JAVA基础知识.md","localizedDate":"2024年9月1日","excerpt":"<p>一个Java源文件中最多只能有一个公共类，但是可以有多个非公共类，公共类的名称必须与文件名相同。</p>\\n<p>在Java编程中，类是基本单位，它是一个蓝图或模板，用于创建对象。类包含属性和方法，这些方法可以是公开的（public）或私有的（private），可以是静态的（static）或实例的，并且可以有返回值或不返回值。实例就是不加static就是实例方法。</p>\\n<p>Java常用的2种注释，第一种是单行注释，以双斜线开头，而多行注释以/<em>星号开头，以</em>/结束。</p>\\n<p>在Java编程中，变量是存储数据的容器。每个变量都有一个类型，决定了它可以存储哪种类型的数据。Java中的变量可以分为以下几类：</p>","autoDesc":true}');export{g as comp,c as data};
