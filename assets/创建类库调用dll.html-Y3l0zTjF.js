import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as l,o as n}from"./app-CXisqpvU.js";const e={};function t(h,i){return n(),a("div",null,[...i[0]||(i[0]=[l(`<h1 id="创建类库调用dll" tabindex="-1"><a class="header-anchor" href="#创建类库调用dll"><span>创建类库调用dll</span></a></h1><h2 id="第一步-创建类库" tabindex="-1"><a class="header-anchor" href="#第一步-创建类库"><span>第一步：创建类库</span></a></h2><ol><li>在项目模版里面选择创建<code>类库</code></li><li>删除默认的<code>Class1.cs</code>文件</li><li>右键点击项目，选择<code>添加</code> → <code>新建项</code></li><li>根据功能为新类命名（之后调用时将使用这个命名）</li><li>将类中的<code>internal</code>修饰符改为<code>public</code></li><li>在这个类中编写你的函数</li></ol><blockquote><p><strong>注意</strong>：一般一个文件就是一个类，可以理解为每个文件就是一个API接口。一个类库中可以创建多个文件/类。</p></blockquote><h2 id="第二步-在其他项目中引用类库" tabindex="-1"><a class="header-anchor" href="#第二步-在其他项目中引用类库"><span>第二步：在其他项目中引用类库</span></a></h2><ol><li>右键想要调用这个类库的项目</li><li>选择<code>添加</code> → <code>项目引用</code></li><li>点击浏览，选中生成的类库.dll文件</li><li>在需要调用的代码文件顶部添加：<code>using 类库的名字;</code></li><li>调用类的方法：<code>类名.函数名</code></li></ol><h2 id="第三步-依赖管理" tabindex="-1"><a class="header-anchor" href="#第三步-依赖管理"><span>第三步：依赖管理</span></a></h2><blockquote><p>如果类库已经通过 NuGet 引用了某个包（如 Newtonsoft.Json），调用它的项目不需要手动重新下载该包​​，因为 .NET 的依赖机制会自动处理传递性依赖。</p></blockquote><h2 id="完整示例" tabindex="-1"><a class="header-anchor" href="#完整示例"><span>完整示例</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在类库项目中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyLibrary</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello from DLL!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在调用项目中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyLibrary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 引用类库命名空间</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Program</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        string</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> MyLibrary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 调用类库方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)])])}const r=s(e,[["render",t]]),c=JSON.parse('{"path":"/acrticle/Csharp/%E5%88%9B%E5%BB%BA%E7%B1%BB%E5%BA%93%E8%B0%83%E7%94%A8dll.html","title":"创建类库调用dll","lang":"zh-CN","frontmatter":{"title":"创建类库调用dll","icon":"code","order":12,"category":["C#学习"],"tag":["dll","类库"],"description":"创建类库调用dll 第一步：创建类库 在项目模版里面选择创建类库 删除默认的Class1.cs文件 右键点击项目，选择添加 → 新建项 根据功能为新类命名（之后调用时将使用这个命名） 将类中的internal修饰符改为public 在这个类中编写你的函数 注意：一般一个文件就是一个类，可以理解为每个文件就是一个API接口。一个类库中可以创建多个文件/类...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建类库调用dll\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-07T05:56:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/Csharp/%E5%88%9B%E5%BB%BA%E7%B1%BB%E5%BA%93%E8%B0%83%E7%94%A8dll.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"创建类库调用dll"}],["meta",{"property":"og:description","content":"创建类库调用dll 第一步：创建类库 在项目模版里面选择创建类库 删除默认的Class1.cs文件 右键点击项目，选择添加 → 新建项 根据功能为新类命名（之后调用时将使用这个命名） 将类中的internal修饰符改为public 在这个类中编写你的函数 注意：一般一个文件就是一个类，可以理解为每个文件就是一个API接口。一个类库中可以创建多个文件/类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T05:56:49.000Z"}],["meta",{"property":"article:tag","content":"类库"}],["meta",{"property":"article:tag","content":"dll"}],["meta",{"property":"article:modified_time","content":"2025-10-07T05:56:49.000Z"}]]},"git":{"createdTime":1759816609000,"updatedTime":1759816609000,"contributors":[{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":1,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":1.21,"words":362},"filePathRelative":"acrticle/Csharp/创建类库调用dll.md","excerpt":"\\n<h2>第一步：创建类库</h2>\\n<ol>\\n<li>在项目模版里面选择创建<code>类库</code></li>\\n<li>删除默认的<code>Class1.cs</code>文件</li>\\n<li>右键点击项目，选择<code>添加</code> → <code>新建项</code></li>\\n<li>根据功能为新类命名（之后调用时将使用这个命名）</li>\\n<li>将类中的<code>internal</code>修饰符改为<code>public</code></li>\\n<li>在这个类中编写你的函数</li>\\n</ol>\\n<blockquote>\\n<p><strong>注意</strong>：一般一个文件就是一个类，可以理解为每个文件就是一个API接口。一个类库中可以创建多个文件/类。</p>\\n</blockquote>","autoDesc":true}');export{r as comp,c as data};
