import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as s,o as a}from"./app-nmUAsP6a.js";const n={};function r(d,e){return a(),t("div",null,[...e[0]||(e[0]=[s('<h1 id="ms-di-支持的三种生命周期" tabindex="-1"><a class="header-anchor" href="#ms-di-支持的三种生命周期"><span>MS DI 支持的三种生命周期</span></a></h1><p>MS DI（Microsoft Dependency Injection）提供了三种服务生命周期，每种生命周期适用于不同的场景：</p><table><thead><tr><th>方法</th><th>说明</th><th>生命周期特点</th></tr></thead><tbody><tr><td><code>services.AddTransient&lt;TService, TImplementation&gt;()</code></td><td>瞬时</td><td>每次请求都创建新实例</td></tr><tr><td><code>services.AddScoped&lt;TService, TImplementation&gt;()</code></td><td>作用域</td><td>同一作用域内单例</td></tr><tr><td><code>services.AddSingleton&lt;TService, TImplementation&gt;()</code></td><td>单例</td><td>全局唯一实例</td></tr></tbody></table><h2 id="生命周期详解" tabindex="-1"><a class="header-anchor" href="#生命周期详解"><span>生命周期详解</span></a></h2><h3 id="瞬时-transient" tabindex="-1"><a class="header-anchor" href="#瞬时-transient"><span>瞬时（Transient）</span></a></h3><ul><li>每次从服务容器请求服务时，都会创建一个新的实例</li><li>适用于轻量级、无状态的服务</li><li>生命周期最短，每次使用都是新对象</li></ul><h3 id="作用域-scoped" tabindex="-1"><a class="header-anchor" href="#作用域-scoped"><span>作用域（Scoped）</span></a></h3><ul><li>在同一作用域（Scope）内，多次请求会返回同一个实例</li><li>不同作用域会创建不同的实例</li><li>适用于需要在单个请求或操作期间保持状态的服务</li></ul><h3 id="单例-singleton" tabindex="-1"><a class="header-anchor" href="#单例-singleton"><span>单例（Singleton）</span></a></h3><ul><li>整个应用程序生命周期中只创建一个实例</li><li>所有请求都会返回同一个实例</li><li>适用于全局共享的服务，如配置、日志服务等</li></ul><h1 id="prism-的三种生命周期" tabindex="-1"><a class="header-anchor" href="#prism-的三种生命周期"><span>Prism 的三种生命周期</span></a></h1><p>Prism框架也提供了对应的服务注册方式：</p><h2 id="单例-singleton-1" tabindex="-1"><a class="header-anchor" href="#单例-singleton-1"><span>单例（Singleton）</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">containerRegistry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TImplementation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="瞬态-transient" tabindex="-1"><a class="header-anchor" href="#瞬态-transient"><span>瞬态（Transient）</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">containerRegistry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TImplementation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="作用域-scoped-1" tabindex="-1"><a class="header-anchor" href="#作用域-scoped-1"><span>作用域（Scoped）</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">containerRegistry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterScoped</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TImplementation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="使用建议" tabindex="-1"><a class="header-anchor" href="#使用建议"><span>使用建议</span></a></h2><ol><li><strong>单例模式</strong>：适用于配置管理、日志记录、缓存服务等全局共享资源</li><li><strong>作用域模式</strong>：适用于需要在特定范围内保持状态的服务，如数据库上下文</li><li><strong>瞬时模式</strong>：适用于轻量级、无状态的服务，如计算服务、验证服务等</li></ol><p>选择合适的生命周期对于应用程序的性能和资源管理非常重要。</p>',21)])])}const p=i(n,[["render",r]]),o=JSON.parse('{"path":"/acrticle/Csharp/WPF%E5%AD%A6%E4%B9%A0/Prism%E5%92%8CMS%20DI%E6%B3%A8%E5%86%8C%E7%9A%84%E4%B8%89%E7%A7%8D%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","title":"Prism和MS DI注册的三种生命周期","lang":"zh-CN","frontmatter":{"title":"Prism和MS DI注册的三种生命周期","icon":"code","order":17,"category":["C#学习"],"tag":["Prism","MS DI"],"description":"MS DI 支持的三种生命周期 MS DI（Microsoft Dependency Injection）提供了三种服务生命周期，每种生命周期适用于不同的场景： 生命周期详解 瞬时（Transient） 每次从服务容器请求服务时，都会创建一个新的实例 适用于轻量级、无状态的服务 生命周期最短，每次使用都是新对象 作用域（Scoped） 在同一作用域（S...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prism和MS DI注册的三种生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-10T05:06:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/Csharp/WPF%E5%AD%A6%E4%B9%A0/Prism%E5%92%8CMS%20DI%E6%B3%A8%E5%86%8C%E7%9A%84%E4%B8%89%E7%A7%8D%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"Prism和MS DI注册的三种生命周期"}],["meta",{"property":"og:description","content":"MS DI 支持的三种生命周期 MS DI（Microsoft Dependency Injection）提供了三种服务生命周期，每种生命周期适用于不同的场景： 生命周期详解 瞬时（Transient） 每次从服务容器请求服务时，都会创建一个新的实例 适用于轻量级、无状态的服务 生命周期最短，每次使用都是新对象 作用域（Scoped） 在同一作用域（S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-10T05:06:31.000Z"}],["meta",{"property":"article:tag","content":"MS DI"}],["meta",{"property":"article:tag","content":"Prism"}],["meta",{"property":"article:modified_time","content":"2025-10-10T05:06:31.000Z"}]]},"git":{"createdTime":1760072791000,"updatedTime":1760072791000,"contributors":[{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":1,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":1.49,"words":448},"filePathRelative":"acrticle/Csharp/WPF学习/Prism和MS DI注册的三种生命周期.md","excerpt":"\\n<p>MS DI（Microsoft Dependency Injection）提供了三种服务生命周期，每种生命周期适用于不同的场景：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>说明</th>\\n<th>生命周期特点</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>services.AddTransient&lt;TService, TImplementation&gt;()</code></td>\\n<td>瞬时</td>\\n<td>每次请求都创建新实例</td>\\n</tr>\\n<tr>\\n<td><code>services.AddScoped&lt;TService, TImplementation&gt;()</code></td>\\n<td>作用域</td>\\n<td>同一作用域内单例</td>\\n</tr>\\n<tr>\\n<td><code>services.AddSingleton&lt;TService, TImplementation&gt;()</code></td>\\n<td>单例</td>\\n<td>全局唯一实例</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{p as comp,o as data};
