import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-CgcWh0et.js";const t={};function l(h,i){return n(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数"><span>回调函数</span></a></h1><p>回调函数是指将一个函数作为参数传递给另一个函数，当某个事件发生或某个操作完成时，被传递的函数会被调用。我们称被传递的函数为回调函数。</p><p>在 C# 中，回调主要通过委托（delegate）来实现。</p><p>因为函数作为参数传递，我们需要声明参数的类型；那么委托就充当了这个角色，定义函数的参数和返回值类型。</p><h2 id="委托定义" tabindex="-1"><a class="header-anchor" href="#委托定义"><span>委托定义</span></a></h2><p>首先，我们需要定义一个委托类型，它指定了回调函数的签名。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义委托类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> delegate</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CallbackDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用回调的方法" tabindex="-1"><a class="header-anchor" href="#使用回调的方法"><span>使用回调的方法</span></a></h2><p>接下来，我们定义一个方法，它接受一个委托类型的参数，并在适当的时候调用这个委托。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用回调的方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CallbackDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;处理中...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 调用回调</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;处理完成&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回调方法" tabindex="-1"><a class="header-anchor" href="#回调方法"><span>回调方法</span></a></h2><p>然后，我们定义一个符合委托签名的方法，这个方法将作为回调函数。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 回调方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$&quot;回调收到消息: {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h2><p>最后，我们调用 <code>Process</code> 方法，并将 <code>MyCallback</code> 方法作为参数传递给它。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MyCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们实现了回调函数的功能。当 <code>Process</code> 方法执行后，它会调用我们传递给它的回调函数 <code>MyCallback</code>，并输出相应的消息。</p>`,17)])])}const r=s(t,[["render",l]]),d=JSON.parse('{"path":"/acrticle/Csharp/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0.html","title":"回调函数","lang":"zh-CN","frontmatter":{"title":"回调函数","icon":"code","order":10,"category":["C#学习"],"tag":["C#","回调函数"],"description":"回调函数 回调函数是指将一个函数作为参数传递给另一个函数，当某个事件发生或某个操作完成时，被传递的函数会被调用。我们称被传递的函数为回调函数。 在 C# 中，回调主要通过委托（delegate）来实现。 因为函数作为参数传递，我们需要声明参数的类型；那么委托就充当了这个角色，定义函数的参数和返回值类型。 委托定义 首先，我们需要定义一个委托类型，它指定...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回调函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-10T01:39:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/Csharp/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"回调函数"}],["meta",{"property":"og:description","content":"回调函数 回调函数是指将一个函数作为参数传递给另一个函数，当某个事件发生或某个操作完成时，被传递的函数会被调用。我们称被传递的函数为回调函数。 在 C# 中，回调主要通过委托（delegate）来实现。 因为函数作为参数传递，我们需要声明参数的类型；那么委托就充当了这个角色，定义函数的参数和返回值类型。 委托定义 首先，我们需要定义一个委托类型，它指定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-10T01:39:23.000Z"}],["meta",{"property":"article:tag","content":"回调函数"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:modified_time","content":"2025-10-10T01:39:23.000Z"}]]},"git":{"createdTime":1758683459000,"updatedTime":1760060363000,"contributors":[{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":2,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":1.31,"words":393},"filePathRelative":"acrticle/Csharp/回调函数.md","excerpt":"\\n<p>回调函数是指将一个函数作为参数传递给另一个函数，当某个事件发生或某个操作完成时，被传递的函数会被调用。我们称被传递的函数为回调函数。</p>\\n<p>在 C# 中，回调主要通过委托（delegate）来实现。</p>\\n<p>因为函数作为参数传递，我们需要声明参数的类型；那么委托就充当了这个角色，定义函数的参数和返回值类型。</p>\\n<h2>委托定义</h2>\\n<p>首先，我们需要定义一个委托类型，它指定了回调函数的签名。</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-csharp\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 定义委托类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> delegate</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> void</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> CallbackDelegate</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">string</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> message</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
