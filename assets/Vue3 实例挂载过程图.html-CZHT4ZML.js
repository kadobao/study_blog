import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as n,o as s}from"./app-DA0sIwlw.js";const o={};function a(d,e){return s(),i("div",null,[...e[0]||(e[0]=[n(`<p>生命周期钩子是为了开发者在vue组件的创建到销毁的不同阶段可以执行自己的逻辑。</p><p>在 <code>index.html</code> 文件里，我们会添加一个空的 <code>&lt;div&gt;</code>，作为 Vue 应用的显示位置（挂载点）。</p><p><code>main.ts</code> 是应用的启动文件，它负责启动 Vue 并把 Vue 应用内容放到我们在 <code>index.html</code> 里添加的这个 <code>&lt;div&gt;</code> 中。</p><p><code>App.vue</code> 是 Vue 应用的主要组件（根组件）。所有其他组件都在 <code>App.vue</code> 里组合和显示，<code>App.vue</code> 由 <code>main.ts</code> 负责加载和显示。</p><hr><h3 id="vue-实例挂载过程图" tabindex="-1"><a class="header-anchor" href="#vue-实例挂载过程图"><span>Vue 实例挂载过程图</span></a></h3><p>Vue 3 实例挂载过程的流程图步骤：</p><ol><li><strong>创建 Vue 应用实例</strong></li><li><strong>初始化根组件和虚拟 DOM 树</strong></li><li><strong>调用 <code>onBeforeMount</code> 钩子</strong></li><li><strong>将虚拟 DOM 渲染为真实 DOM</strong></li><li><strong>将真实 DOM 插入到挂载点 (e.g., <code>#app</code>)</strong></li><li><strong>调用 <code>onMounted</code> 钩子</strong></li><li><strong>建立响应式系统</strong></li></ol><p>以下是该流程的流程图表示：</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mermaid"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  A[创建 Vue 应用实例] --&gt; B[初始化根组件和虚拟 DOM 树]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  B --&gt; C{调用 onBeforeMount 钩子}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  C --&gt; D[将虚拟 DOM 渲染为真实 DOM]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  D --&gt; E[将真实 DOM 插入挂载点]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  E --&gt; F{调用 onMounted 钩子}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  F --&gt; G[建立响应式系统]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)])])}const r=t(o,[["render",a]]),p=JSON.parse('{"path":"/acrticle/vue%E5%AD%A6%E4%B9%A0/Vue3%20%E5%AE%9E%E4%BE%8B%E6%8C%82%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%9B%BE.html","title":"Vue3 实例挂载过程图","lang":"zh-CN","frontmatter":{"title":"Vue3 实例挂载过程图","icon":"fa-brands fa-vuejs","order":14,"category":["vue学习"],"tag":["vue学习"],"description":"生命周期钩子是为了开发者在vue组件的创建到销毁的不同阶段可以执行自己的逻辑。 在 index.html 文件里，我们会添加一个空的 <div>，作为 Vue 应用的显示位置（挂载点）。 main.ts 是应用的启动文件，它负责启动 Vue 并把 Vue 应用内容放到我们在 index.html 里添加的这个 <div> 中。 App.vue 是 Vu...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3 实例挂载过程图\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-05T06:34:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XJ\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/study_blog/acrticle/vue%E5%AD%A6%E4%B9%A0/Vue3%20%E5%AE%9E%E4%BE%8B%E6%8C%82%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%9B%BE.html"}],["meta",{"property":"og:site_name","content":"个人学习记录博客"}],["meta",{"property":"og:title","content":"Vue3 实例挂载过程图"}],["meta",{"property":"og:description","content":"生命周期钩子是为了开发者在vue组件的创建到销毁的不同阶段可以执行自己的逻辑。 在 index.html 文件里，我们会添加一个空的 <div>，作为 Vue 应用的显示位置（挂载点）。 main.ts 是应用的启动文件，它负责启动 Vue 并把 Vue 应用内容放到我们在 index.html 里添加的这个 <div> 中。 App.vue 是 Vu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-05T06:34:49.000Z"}],["meta",{"property":"article:tag","content":"vue学习"}],["meta",{"property":"article:modified_time","content":"2025-09-05T06:34:49.000Z"}]]},"git":{"createdTime":1728874054000,"updatedTime":1757054089000,"contributors":[{"name":"cf","username":"cf","email":"toysouth0@gmail.com","commits":2,"url":"https://github.com/cf"},{"name":"XJ","username":"XJ","email":"XJ@qq.com","commits":2,"url":"https://github.com/XJ"}]},"readingTime":{"minutes":1.1,"words":329},"filePathRelative":"acrticle/vue学习/Vue3 实例挂载过程图.md","excerpt":"<p>生命周期钩子是为了开发者在vue组件的创建到销毁的不同阶段可以执行自己的逻辑。</p>\\n<p>在 <code>index.html</code> 文件里，我们会添加一个空的 <code>&lt;div&gt;</code>，作为 Vue 应用的显示位置（挂载点）。</p>\\n<p><code>main.ts</code> 是应用的启动文件，它负责启动 Vue 并把 Vue 应用内容放到我们在 <code>index.html</code> 里添加的这个 <code>&lt;div&gt;</code> 中。</p>\\n<p><code>App.vue</code> 是 Vue 应用的主要组件（根组件）。所有其他组件都在 <code>App.vue</code> 里组合和显示，<code>App.vue</code> 由 <code>main.ts</code> 负责加载和显示。</p>","autoDesc":true}');export{r as comp,p as data};
